from websocket import create_connection
from Crypto.Cipher import AES
from pkcs7 import PKCS7Encoder
from hashlib import sha256
import hashlib
import json
import base64

'''
[+] Answer 989: {"method":"question","id":"a19845b6-78b2-4051-8128-128bd5269b71","questionText":"eweMfmuHZTqnguBIM/vgDLd27VM4zBHb5POrGZWvm+pl6/BvNWjjVOO2gDam2pDhZTq3WsEeQN+Bv3HPqKVpvxv+Wq9phdi7k8qy3KDPUow=","options":["W3ATdm8qAOITBO5sDWqomg==","aTLg4ViMo/4vMgFEFYdmsQ==","/9aNoEnRQkzGM46LwSZ1fQ==","qSu8qQnQ8rGonKY1L590Lg=="],"correctAnswer":"5g0KBgqm1dOgCqFoB1Sz4uRVQL9v/x4BcAYoWyqb/5w=","requestIdentifier":"11497a3eb8fe49733800e1e12d838bec"}
[+] Answer 990: {"method":"question","id":"f07ec23d-9eed-49cb-8387-c1477bbdf444","questionText":"PF4G/XgsolpU98kvm0+K1h1sTWA1C0rFOwScIG7e1lINjl65Mj8AHqrv2peK9tn6ra+RVlXF3tQnzhQuZ4+Q0g==","options":["vP1bbMUrydVTF7zG85c9i6hZYrE6XwHrorvZc/Lba4E=","vP1bbMUrydVTF7zG85c9i7iu0+pwzoJgx0DQJjb+D8s=","h9IrQVRYwxZ2950e/VhKzDeaI0jvViBX77anbwVjm1Q=","nRUqplCWHZbAQ/UEvlA1r3B0UiTGrvv1o20EV5+vkU4="],"correctAnswer":"HO2ivr/E9arBB+txEetvYl1qgRcCsOfhLOHeOtGuQtU=","requestIdentifier":"b9b073212ca6e2d749834e8f8febb2c1"}
[+] Answer 991: {"method":"question","id":"3c096701-804c-455b-9731-ff866f727662","questionText":"xC4MfPBbZc6zenz/cFnLICOjhoegVlP+mEA03GQXZJz+xUY9oq7fZ0FDLUaHQ8+hnSzZKm3yHmwII9tnF8aSFfWD9GKs93bs6h2z79Yrvro=","options":["g01W31w+DlO83F1MUiTc7A==","ADCpCW0bV/1ZYexI0S8oJQ==","jt1awrORYW04HvGpf1Ws3g==","FUZJbXDpuq26jdaSFCYK1w=="],"correctAnswer":"vZpY6yOtgtEQ/0TZnxrPf2xq0Pc/hnjuYkA6TC7H/DA=","requestIdentifier":"2474ede65c7fe5d5b197dfcec4f3c6fb"}
[+] Answer 992: {"method":"question","id":"c209a5f1-ae34-4cfe-92ea-dec689c5e4ac","questionText":"SKKwRJEDkf6gnPePgp17gsblPCbxyQImEaNXbJs8D8K0O26qSKMxI7Zy3tpF3q6IR+DWJ+vNKnVzqF6ILKFfHG1xLxh5dqI0mCQN10KVOaU=","options":["kiUJj/qZ2R+xy7gbaEskUg==","hzgrLEkZ4iPqG6SuTOvNIQ==","Nem8jQZU1ICJJI8dxpihKA==","D2Da6m8OrutiemKOPu9Ayg=="],"correctAnswer":"tnK1BGTQHW62OXc9a+c5bD4iV0D2Nz1LeTkdFhAEdgI=","requestIdentifier":"292b6d55ff2ef0664b707e4d58dc8e4d"}
[+] Answer 993: {"method":"question","id":"68901516-2496-44bf-ac14-7e9b24675054","questionText":"VVZQczg5Ze4DxZEE5F6mLlZ1ctZuwEBfLfwZE51e6D3ARBLkeg3W5VOXjlC3pPfzPJp7z6CPBEN7qhBtrNbGuf0CJ+YLDs529vCK/z+RX3s=","options":["xbvNcs9i/ahy9YOVNeLwrA==","cf+3qCAfjNjXoYl2Bg5rcw==","pS86QGlWhpFUAp2XSG/fIw==","NxXpl618vEeebvFBzze7uA=="],"correctAnswer":"zcTXtXwy30oHR81aajgVpQNoquqgUmly3FdGJLu+gfA=","requestIdentifier":"996adbe032888952a5589e82c36e40f7"}
[+] Answer 994: {"method":"question","id":"b177f474-2cdc-425b-8599-aff58ae7d7bd","questionText":"dfXYpJq+bPrLN/UDf9/vKT7qnHKOtU1UUNkL5sPtR9Ignl/lMYwjsERPuOliiUEZWluoGeGLabnl0bJ+6oql+Bhq80H/Wbhi/2Vh/egFyl4=","options":["4UkbPYBdPAXgBxWuV8S9yg==","jYKa8XiByvEjPI/n0gAvwA==","Lp1NfNL96GOiUAfvI+xvwg==","KSNKYVZBa0Z61Kf9Lxu4Yg=="],"correctAnswer":"SvMdtHrXnkFoQ9BpHTL3xwT8tos0hSSvZRX5aYI5er8=","requestIdentifier":"9ad6d422e31cd0a1d2f4b3c6860d5fda"}
[+] Answer 995: {"method":"question","id":"bca37b6e-46dc-4ae6-b6ee-1be1eb98db15","questionText":"SqWu9dj6Wr227uyzHJ++NKGI+Ow4Tgw1lqD1S9f1qzhkonp/2jcAgVynjhwoOlq+a3wwx7nMHDVjixDiz4tMNqzsv1t0elf5q2sXr3+9blxZmKQjd3sHL3EcGYDKSyjy","options":["9Y0Titm6rKPslJ/IzDpmGg==","3NfZ3YP8Fd551XiIiccvWA==","ggCJ588cJrJ3amVdzWxHeg==","byvgOeX2Jk57iMfISkZ4/g=="],"correctAnswer":"b8SgCUPbOAckiL9Krb5XUh5LUuM861BRcoIzmnMBc60=","requestIdentifier":"b0d66d456b204b8a22b8ad59a1653fd2"}
[+] Answer 996: {"method":"question","id":"e14943a5-b74c-4331-bfb3-1561b8a6d525","questionText":"/3eTLsh9AzcptZM1D0WmIvvNmn6Lr0gdmIUZt8PiQXDg7QH/cBqCx7QLz2lKu0zH","options":["k4i1kEmd1M13dswJEDnb1A==","4Oz/CJQPhpXtsMlSuLdXcg==","J1k68y0X3z84q9ciactQew==","txZapo3QCvbe0A7vFVyDFA=="],"correctAnswer":"UOQqg9TKOCR5LVg/VwRF2dNp47ZE3pUw8AWxuchjVKs=","requestIdentifier":"cf539832ed27adab4135c012b32e701f"}
[+] Answer 997: {"method":"question","id":"9767464a-be42-4e73-a96e-bbe0d3e3d347","questionText":"xFxEVsnszNVz1rFXUVwZJyTfR59203muEG0+VN8K46+2lhuBNi8LVQdJtGMidYwGru5NQjna74zja4UECSgMyzP5riGm1BO5S5AlxYagX9c=","options":["beP4Umzg+E6PH8fGkcB3rQ==","wkr5K2KPR0TaIkVVFCiRIA==","brx0mD1Tm6tVCbilUaCcgQ==","1+ucxej9xoiHkC3lX6TovQ=="],"correctAnswer":"B+2CCJg9lQ+NKOkWV2ukPaIiCLbFzpcUDzzggEu4eow=","requestIdentifier":"6a48c53bab38e436a39f12aa0702152b"}
[+] Answer 998: {"method":"question","id":"78fb2d08-0948-45da-a770-a8a887d52af1","questionText":"4Iwa+Y33SE5s2YBhsIhj1g9Axb9vs/OS4sRycwlDjAbAY+ap9lM0fPYhEfz2A9o0/6fWGkUZV2cOsshhGaixMEt2JEhubkjuEO27qCs/ZhI=","options":["i3hzr2C9Pf+Adhre33ZYuw==","9rH/0otiaRu/X2ET709x6g==","NBXD5whDnnmczk9lFo8e1w==","5a15RFad+AGeJaMGiaCFBw=="],"correctAnswer":"Suz8+sHJ6mRWFrkCiwQxH1OC0/zIFLSzD+tNa0uCeOI=","requestIdentifier":"7929291e08ab275681e6a83c04292852"}
[+] Answer 999: {"method":"question","id":"49bd20cf-bc6e-40a9-89d0-3ff564e74ecb","questionText":"9uQdKX982NNZD3r+uXXQyRMzcyUrNRyrcvytPv6tUuo+OmL9+hbThdcaETmQ9Y3wdinLcC63fSmtlyDBJh9J+kumzjrOYkCVvsZ6IipAZzCHCTCQulXBbWG6Ee7kg6KqTyxMkPKviRQ/5iDGHFZ5HFPttdk3n1vnINjZCOdvuYc=","options":["vmCWx2QQD3jXU9fLnyAp/w==","9Gi9KIT+RQISFKH5+yyGfw==","XYjtbIc0mfmonpl4q41lQw==","oMtrW8pMVuGQsoPmDVcsSg=="],"correctAnswer":"EKrgEUjnELC8YhGqdjE6vNCUuA0Z7f+usDM9U5oYGAo=","requestIdentifier":"28f1e57a2a5c8f9f633d7842578c0b95"}
[+] Answer 1000: {"method":"flag","flag":"rtcp{qu1z_4pps_4re_c00l_aeecfa13}"}
'''

ws = create_connection("ws://challs.houseplant.riceteacatpanda.wtf:40001")
userToken = '79990edb06648800f3e23a12e720cfb888b8b989d88bc2406e7cae1c225a4566'
encoder = PKCS7Encoder()
# D** C**E https://bytes.com/topic/python/answers/501594-negative-hex-int
def u2(x):
    if x & 0x80:
        return -((~x & 0xff) + 1)
    else:
        return x

def get_byte_array(v):
    return v.decode("hex")
    key = []
    i = 0
    while i < len(v):
        key.append(u2(int(v[i:i+2], 16)))
        i += 2
    return key

def get_key(s):
    h = hashlib.new('sha256')
    h.update(s)
    v = h.hexdigest()
    return v.decode("hex")
    #return get_byte_array(v)
    #return v.decode("hex")


def first_req():
    ws.send('{"method":"ident","userToken":"c50d09de7a77de05aef6c9ae8c73d46184aaac35d49d4007d5744c40a9d33edf"}')
    result =  ws.recv()
    print "[+] Login: " + result

def play():
    ws.send('{"method":"start"}')
    result = ws.recv()
    print "[+] Play: " + result
    result = ws.recv()
    print "[+] Question: " + result
    return result

def encrypt(plaintext, key, iv):
    global encoder
    key_length = len(key)
    if (key_length >= 32):
        k = key[:32]
    elif (key_length >= 24):
        k = key[:24]
    else:
        k = key[:16]

    aes = AES.new(k, AES.MODE_CBC, iv[:16])
    pad_text = encoder.encode(plaintext)
    return aes.encrypt(pad_text)

def decrypt2(ciphertext, key, iv):
    global encoder
    key_length = len(key)
    if (key_length >= 32):
        k = key[:32]
    elif (key_length >= 24):
        k = key[:24]
    else:
        k = key[:16]
    aes = AES.new(k, AES.MODE_CBC, iv[:16])
    pad_text = aes.decrypt(ciphertext)
    return encoder.decode(pad_text)

def decrypt(data):
    #iv requestIdentifier
    # key sha256 di 28d935a405f3cd979687cb3f669d4d3cb0764b8d857ab7530d93703c9f419060:7b382d16-52ed-4794-af31-decb24810000
    data = json.loads(data)
    key = get_key(userToken + ":" + data['id'])
    iv = get_byte_array(data['requestIdentifier'])#.decode("hex")

    question = decrypt2(base64.b64decode(data['questionText']), key, iv)
    response = decrypt2(base64.b64decode(data['correctAnswer']), key, iv)
    return response

def send_answer(response, i):
    res = '{"method":"answer","answer":'
    res += str(response) + "}"
    ws.send(res)
    result = ws.recv()
    print "[+] Answer " + str(i) + ": " + result
    return result

first_req()
question = play()
response = decrypt(question)
for i in range(0, 1005):
    r = send_answer(response, i)
    response = decrypt(r)
    if "flag" in response:
        print response
        break
ws.close()
